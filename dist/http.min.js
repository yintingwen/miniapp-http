function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var HttpRequestTask = /*#__PURE__*/function () {
  function HttpRequestTask(task) {
    _classCallCheck(this, HttpRequestTask);

    _defineProperty(this, "_task", void 0);

    this._task = task;
  }

  _createClass(HttpRequestTask, [{
    key: "abort",
    value: function abort() {
      var _this$_task;

      (_this$_task = this._task) === null || _this$_task === void 0 ? void 0 : _this$_task.abort();
    }
  }]);

  return HttpRequestTask;
}();

var HttpInterceptors = /*#__PURE__*/function () {
  function HttpInterceptors() {
    _classCallCheck(this, HttpInterceptors);

    _defineProperty(this, "successList", []);

    _defineProperty(this, "errorList", []);

    _defineProperty(this, "idMap", {});

    _defineProperty(this, "id", 0);
  }

  _createClass(HttpInterceptors, [{
    key: "on",
    value:
    /**
     * 注册回调
     * @param type
     * @param func
     * @returns
     */
    function on(type, func) {
      if (typeof func !== 'function') return;
      this.idMap[this.id] = {
        type: type,
        value: func
      };
      this.addCallback(type, func);
      return this.id++;
    }
  }, {
    key: "off",
    value: function off(id) {
      if (typeof id !== "number") return;
      var map = this.idMap[this.id];
      if (!map) return;
      this.deleteCallback(map.type, map.value);
      delete this.idMap[this.id];
    }
  }, {
    key: "clear",
    value: function clear() {
      this.idMap = {};
      this.successList = [];
      this.errorList = [];
    }
  }, {
    key: "addCallback",
    value: function addCallback(type, func) {
      var targetList = type === 'success' ? this.successList : this.errorList;
      targetList.push(func);
    }
    /**
     * 删除队列中的回调
     * @param type
     * @param func
     */

  }, {
    key: "deleteCallback",
    value: function deleteCallback(type, func) {
      var targetList = type === 'success' ? this.successList : this.errorList;
      var index = targetList.indexOf(func);
      targetList.splice(index, 1);
    }
  }, {
    key: "run",
    value: function run(type, e) {
      var targetList = type === 'success' ? this.successList : this.errorList;
      var p = Promise.resolve(e);

      for (var index = 0; index < targetList.length; index++) {
        p = p.then(targetList[index], targetList[index]);
      }

      return p;
    }
  }]);

  return HttpInterceptors;
}();

var HttpRequestInterceptors = /*#__PURE__*/function (_HttpInterceptors) {
  _inherits(HttpRequestInterceptors, _HttpInterceptors);

  var _super = _createSuper(HttpRequestInterceptors);

  function HttpRequestInterceptors() {
    _classCallCheck(this, HttpRequestInterceptors);

    return _super.call(this);
  }

  _createClass(HttpRequestInterceptors, [{
    key: "use",
    value: function use(success) {
      if (typeof success !== 'function') return;
      this.on('success', success);
    }
  }]);

  return HttpRequestInterceptors;
}(HttpInterceptors);
var HttpResponseInterceptors = /*#__PURE__*/function (_HttpInterceptors2) {
  _inherits(HttpResponseInterceptors, _HttpInterceptors2);

  var _super2 = _createSuper(HttpResponseInterceptors);

  function HttpResponseInterceptors() {
    _classCallCheck(this, HttpResponseInterceptors);

    return _super2.apply(this, arguments);
  }

  _createClass(HttpResponseInterceptors, [{
    key: "use",
    value: function use(success, error) {
      if (typeof success === 'function') {
        this.on('success', success);
      }

      if (typeof error === 'function') {
        this.on('error', error);
      }
    }
  }]);

  return HttpResponseInterceptors;
}(HttpInterceptors);

var _excluded = ["token"];

var HttpRequest = /*#__PURE__*/function () {
  // _task: HttpRequestTask
  function HttpRequest(options) {
    _classCallCheck(this, HttpRequest);

    _defineProperty(this, "_baseConfig", void 0);

    _defineProperty(this, "interceptors", void 0);

    this._baseConfig = options;
    this.interceptors = {
      request: new HttpRequestInterceptors(),
      response: new HttpResponseInterceptors()
    };
  }

  _createClass(HttpRequest, [{
    key: "request",
    value: function request(options) {
      var _this = this;

      return new Promise(function (resolve, rejcet) {
        var tokenCallback = options.token,
            currentOption = _objectWithoutProperties(options, _excluded);

        var requestOption = _objectSpread2(_objectSpread2(_objectSpread2({}, _this._baseConfig), currentOption), {}, {
          success: function success(e) {
            var p = _this.interceptors.response.run('success', e);

            resolve(p);
          },
          error: function error(e) {
            var p = _this.interceptors.response.run('error', e);

            rejcet(p);
          }
        });

        var originTask = wx.request(requestOption);
        var requestToken = new HttpRequestTask(originTask);
        tokenCallback(requestToken);
      });
    }
  }, {
    key: "get",
    value: function get() {}
  }, {
    key: "post",
    value: function post() {}
  }, {
    key: "delete",
    value: function _delete() {}
  }, {
    key: "put",
    value: function put() {}
  }, {
    key: "options",
    value: function options() {}
  }, {
    key: "head",
    value: function head() {}
  }]);

  return HttpRequest;
}();

var HttpRequest$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': HttpRequest
});

export { HttpRequest$1 as default };
